# Punto 2 ‚Äî ETL + Visualizaci√≥n + Dashboard (Taller)

Este proyecto resuelve el **Punto 2** del taller: implementar un **ETL** con **Polars**, realizar **gr√°ficas** con **hvPlot** y **Plotly**, y desplegar un **dashboard en Streamlit** para analizar la base real `BD_SENSORES.xlsx`.

---

## üîé ¬øQu√© se hizo y por qu√©?

- **Extracci√≥n (E):** Se carg√≥ `BD_SENSORES.xlsx` y se etiquet√≥ cada fila con `__sheet__` (nombre de hoja) para saber su origen.
- **Transformaci√≥n (T):**
  - Se convirtieron valores de texto con unidades (p. ej. `"0.55 V"`) a **float** para poder analizarlos.
  - Se cambi√≥ de **formato ancho ‚Üí largo**: ahora hay una columna **`canal`** (la columna original 1..60) y **`valor`** (la lectura).
  - **Limpieza de calidad:** se eliminaron **nulos** y **outliers** por **z-score** (por hoja/canal) para mejorar la se√±al.
  - **Suavizado**: se cre√≥ **`valor_sm`** con media m√≥vil centrada (reduce ruido).
  - **Normalizaci√≥n**: se cre√≥ **`valor_mm`** en rango **0‚Äì1** (facilita comparar canales de distinta magnitud).
  - **Tiempo sint√©tico**: **`t_s`** = `muestra / fs` (si no se conoce la frecuencia, `fs=1.0` por defecto).
- **Carga (L) + Visualizaci√≥n:** Se guardan resultados en **CSV/Parquet** y se visualizan en un **dashboard Streamlit** interactivo para explorar hojas, canales y m√©tricas.

Este flujo deja los datos **limpios, comparables y visualizables**, cumpliendo el objetivo del punto.

---

## üóÇÔ∏è Estructura del proyecto
Punto2_Taller/
‚îú‚îÄ app.py
‚îú‚îÄ etl_polars.py
‚îú‚îÄ requirements.txt
‚îî‚îÄ data/
‚îî‚îÄ BD_SENSORES.xlsx


---

## ‚öôÔ∏è Requisitos

- Python 3.10+  
- Dependencias (se instalan con `requirements.txt`):
  - polars, pandas, plotly, hvplot, bokeh, streamlit, openpyxl

Instala con:
```bash
pip install -r requirements.txt


‚ñ∂Ô∏è C√≥mo ejecutar
1) ETL por consola (opcional)

Ejecuta el pipeline y guarda un Parquet con todo procesado:
python etl_polars.py --path "data/BD_SENSORES.xlsx" --out "data/etl_output.parquet"

Opciones √∫tiles:

# Procesar una hoja espec√≠fica (ej. SENP1), z-score y ventana:
python etl_polars.py --path "data/BD_SENSORES.xlsx" --sheet "SENP1" --z 3.0 --win 5 --fs 1.0 --out "data/etl_output.parquet"

2) Dashboard

Lanza la interfaz web:
python -m streamlit run app.py


üñ•Ô∏è ¬øQu√© se ve en el Dashboard?

Panel lateral (configuraci√≥n):

Ruta Excel: data/BD_SENSORES.xlsx

Hoja: vac√≠a = todas, o el nombre (p. ej. SENP1, EMG, etc.)

Umbral z-score (outliers): filtra lecturas at√≠picas por hoja/canal.

Ventana de suavizado: tama√±o de la media m√≥vil centrada (reduce ruido).

Frecuencia de muestreo (fs): calcula t_s = muestra / fs (en segundos).

Biblioteca de gr√°ficas: Plotly (con bot√≥n a PNG) o hvPlot.

Vista de datos transformados (tabla):

Columnas principales: muestra, __sheet__, Usuario (si existe), canal, valor, valor_sm, valor_mm, t_s.

Controles de an√°lisis:

Hoja a analizar.

Canales (uno o varios) para comparar.

M√©trica (Y):

valor ‚Üí se√±al limpia (sin nulos/outliers).

valor_sm ‚Üí se√±al suavizada (menos ruido).

valor_mm ‚Üí se√±al normalizada (0‚Äì1) para comparar escalas.

Gr√°fica interactiva:

Zoom, panning, hover y (en Plotly) exportar PNG.

Descargas:

Exportar Parquet/CSV con los datos ya transformados.

‚úÖ ¬øQu√© se logr√≥?

Un pipeline ETL robusto con Polars: limpia nulos, filtra outliers, suaviza y normaliza por hoja/canal, adem√°s de a√±adir tiempo t_s.

Un dashboard interactivo en Streamlit para:

Explorar hojas y canales con distintas m√©tricas (crudo, suavizado, normalizado).

Ajustar par√°metros de pre/procesamiento sin tocar c√≥digo.

Exportar datos listos para informes o an√°lisis posteriores.

Entrega reproducible y clara que cumple el Punto 2: ETL con Polars + hvPlot/Plotly + Streamlit.

üîß Par√°metros (explicados r√°pido)

z-score (outliers): umbral t√≠pico 3.0. Baja a 2.5 si ves picos indeseados; sube a 3.5‚Äì4 si elimina demasiado.

Ventana (suavizado): 5‚Äì11 suelen funcionar bien. Mayor = m√°s suave; menor = m√°s detalle.

fs (Hz): si conoces la frecuencia real de muestreo, √∫sala para que t_s est√© en segundos reales.

üß© Notas t√©cnicas

En Polars 1.7.1 se evit√≥ is_numeric; se parsean columnas Utf8 con unidades a float.

Polars advierte deprecations:

with_row_count ‚Üí se podr√≠a migrar a with_row_index.

melt ‚Üí se podr√≠a migrar a unpivot.

No afecta el resultado actual; es una mejora futura.

üÜò Soluci√≥n de problemas (FAQ)

No veo la gr√°fica / sale vac√≠a:
Verifica que elegiste una Hoja real y al menos un Canal.

No abre Streamlit al ejecutar:
Usa python -m streamlit run app.py (evita problemas de PATH).

Quiero m√°s suavizado pero sin perder forma:
Sube la ventana poco a poco (5 ‚Üí 7 ‚Üí 11).

Necesito comparar formas ignorando amplitud:
Usa valor_mm (normalizado 0‚Äì1) y superpone varios canal√©


üß™ Comandos r√°pidos
# Instalar dependencias
pip install -r requirements.txt

# ETL (todas las hojas)
python etl_polars.py --path "data/BD_SENSORES.xlsx" --out "data/etl_output.parquet"

# ETL (una hoja espec√≠fica)
python etl_polars.py --path "data/BD_SENSORES.xlsx" --sheet "SENP1" --z 3.0 --win 5 --fs 1.0 --out "data/etl_output.parquet"

# Dashboard interactivo
python -m streamlit run app.py